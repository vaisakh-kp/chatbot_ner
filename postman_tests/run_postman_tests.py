from __future__ import absolute_import
from subprocess import Popen
import os
import json
import sys
from lib import newman
from lib import datastore


postman_tests_directory = os.path.dirname(os.path.abspath(__file__))
newman_data_path = os.path.join(postman_tests_directory, 'data', 'newman_data.json')
config_file_path = os.path.join(postman_tests_directory, 'config', 'test_env.json')


def create_reports_directory_if_not_exists(report_path):
    """Creates the directory where the report generated by newman command is stored.

    Args:
        report_path (str): The path to the folder where the html report will be generated by newman.

    Returns:
        None
    """
    if not os.path.exists(report_path):
        os.makedirs(report_path)


def get_newman_command():
    """Returns the newman shell command to be used for running the tests.

    Returns:
        str: The shell command to be used for running the tests.
    """
    collection_data_path = os.path.join(postman_tests_directory, 'data', 'ner_collection.json')
    if len(sys.argv) > 1 and sys.argv[1] == '--html':
        report_path = os.path.join(postman_tests_directory, 'newman_reports')
        create_reports_directory_if_not_exists(report_path)
        return (
            f'newman run {collection_data_path} -d {newman_data_path}'
            f' -e {config_file_path} -r cli,htmlextra --reporter-htmlextra-logs'
            f' --reporter-htmlextra-export {report_path}'
        )
    else:
        return (
            f'newman run {collection_data_path} -d {newman_data_path}'
            f' -e {config_file_path}'
        )


def run_tests():
    """Runs the newman test-suite.

    Returns:
        int: The return code of the newman command.
    """
    entities_data_path = os.path.join(postman_tests_directory, 'data', 'entities')
    datastore_data_path = os.path.join(postman_tests_directory, 'data', 'datastore')
    try:
        newman.check_if_data_valid(entities_data_path)
        datastore.sync(datastore_data_path, config_file_path, 'create')
        newman_data = newman.generate_newman_data(entities_data_path)
        with open(newman_data_path, 'w') as fp:
            json.dump(newman_data, fp)
        newman_command = get_newman_command()
        process = Popen(newman_command, shell=True)
        process.communicate()
        return process.returncode
    except Exception as e:
        raise e
    finally:
        try:
            os.remove(newman_data_path)
        except OSError as e:
            if e.errno != 2:  # raise all except "No suck file or directory" error
                raise
        datastore.sync(datastore_data_path, config_file_path, 'delete')


if __name__ == "__main__":
    status = run_tests()
    sys.exit(status)
